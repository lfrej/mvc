{# templates/report.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Redovisningstexter{% endblock %}

{% block body %}
    <h1>Redovisningstexter</h1>

    <h2 id="kmom01">kmom01</h2>
        <p> Jag har arbetat lite med objektorienterad programmering förut. Främst i kursen oopython där vi jobbade med objektorienterade programmeringstekniker i Python. Däremot är det över ett år sedan jag läste kursen så jag kommer inte ihåg allt men kände igen vissa delar när jag gick igenom kursmaterialet för kmom01.</p>
        <p> Jag upplever att det gick bra att arbeta med PHP i detta kursmoment. PHP modell för klasser och objekt är att ett objekt skapas utifrån en klass och en klass är en modell som används för att skapa nya objekt. En klass kan innehålla egenskaper/properties (konstanter och variabler) och metoder (funktioner) som definierar objektet.</p>
        <p> Jag tycker att kodbasen för uppgiften me/report fungerade bra och strukturen är lite liknande som de vi använt i tidigare kurser. Däremot upplever jag den lite rörig med många olika mappar som man måste navigera mellan för att använda olika filer vilket jag inte direkt upplevt tidigare.</p>
        <p> Gällande artikeln “PHP The Right Way” så tycker jag att den verkar bra och hjälpfull. Det som jag anser verkar vara mer intressant är nog delen om Coding Practices för att hålla koll på grunderna i PHP. Jag tycker även att “Dependency Injection” verkar intressant och skulle vilja lära mig mer om för att minska exempelvis hårdkodning.</p>
        <p> Mitt TIL för kmom01 är att getters ger tillgång till privat data och setters kan sätta privata värden.</p>

    <h2 id="kmom02">kmom02</h2>
        <p>De objektorienterade konstruktionen komposition innebär att en klass består av en annan klass. Till exempel klassen Hus som består av klassen Rum. Kompositionen arv innebär att en klass ärver metoder och egenskaper från en annan klass och därmed utökar basklassen. Kompositionen interface är ett kontrakt över en klasstruktur och visar vilka metoder en klass lovar att erbjuda. Interface är en abstrakt variant av klassen. Kompositionen trait är en återanvändbar koddel och kan läggas till i klasser för att utöka deras metoder. Traits kan användas i flera olika klasser.</p>
        <p>Jag tycker att det har gått bra att jobba med symfony och mvc (model, view och controller). Jag tycker att systemet är logiskt och det är en bra struktur för att skapa webbsidor.  Det som jag tycker har varit svårast i detta kursmoment är att skapa klasserna i model klasserna och att tänka logiskt för att skapa korten och kortleken. I övrigt upplever jag att arbetet med symfony har gått bra.</p>
        <p>Jag är nöjd med implementationen av uppgiften. Som jag nämnde tidigare så tyckte jag att det var klurigt och utmanande att jobba med klasser och skapa ett fungerande kortspel. Men jag tycker att jag fick till det i slutändan och är nöjd över min insats.</p>
        <p>Mitt TIL för detta kursmoment är att man kan använda Namespace för att gruppera ihop variabler, funktioner och klasser.</p>

    <h2 id="kmom03">kmom03</h2>
        <p> Jag började kmom03 genom att skapa flödesdiagram och psuedokod för att planera hur uppgiften ska lösas. Jag tycker att det var ett bra sätt att förbereda sig inför uppgiften och få en bättre bild kring vilken kod som behövs och hur man ska gå tillväga för att lösa problemet. I tidigare uppgifter har jag nog mer kastat mig in att lösa uppgiften genom att koda direkt och då har det fort blivit rörigt och därmed lite svårare. Så jag tror att genom att använda dessa metoder kommer det att bli enklare att implementera uppgiften. Jag tyckte däremot att det var lite svårt att få grepp om hur man skriver psuedokod och hur man gör det på bästa sätt. Så det tyckte jag var en utmaning.</p> 
        <p> Jag utgick sedan från flödesdiagrammet och pseudokoden för att implementera uppgiften. Jag skapade två ytterligare klasser, utöver de från kmom02, som hjälper till och skapar spelet. Dessa var cardhand och game. Cardhand skapar och representerar en korthand och är en komposition av klassen card. Klassen game representerar spelet och består av en korthand för spelaren, en korthand för banken samt kortleken. Jag skapade klassen game för att minimera koden i kontrollern för spelet eftersom jag i början skapade spelet och spelarna direkt i kontrollen vilket resulterade i mycket kod. Genom att skapa klassen game minskade jag koden i kontrollerna och gjorde hanteringen av de olika klasserna enklare.</p>
        <p> Jag är nöjd med lösningen av uppgiften och jag tycker att jag fick till en bra struktur i koden och klasserna. Potentiella förbättringsmöjligheter hade varit att utveckla kortspelet ännu mer och exempelvis göra de optionella kraven. Ytterligare förbättring hade varit att arbeta mer med CSS och designa applikationen mer då det inte varit något jag har fokuserat så mycket på under de senaste kursmomenten. Jag tycker att det fungerar bra att koda i ramverket Symfony. Ramverket ger en bra struktur och gör det relativt enkelt att skapa webbapplikationer.</p>
        <p> Mitt TIL för detta kmom är att göra mer förarbete och problemlösningen innan jag börjar programmera. Exempelvis genom att göra flödesschema eller skriva pseudokod. Detta eftersom jag tycker att det underlättade programmeringen och gav en klarare bild över vad som ska lösas.


    <h2 id="kmom04">kmom04</h2>
        <p>Jag upplever att kmom04 har gått bra och jag tycker att PHPUnit är ett bra sätt att enhetstesta koden på. Jag tycker att det var ett smidigt sätt och gjorde det enklare att skriva kod som testar annan kod och gjorde så att man hittar fel i koden enklare. Jag lyckades få 100% kodtäckning för klasserna för kortspelet. Dessa är klasserna card, cardhand, deckofcards och game. Jag upplever att det var relativt enkelt att testa koden som jag tidigare skapat för klasserna. Jag försökte dela upp testningen för koden i mindre delar och därmed testa koden del för del. Men det resulterade även i ganska mycket kod. Så det är något som jag skulle vilja förbättra i framtiden och se hur man kan minimera den.</p>
        <p>Jag fastnade på en del, när jag skulle testa olika utfall av resultatet, om banken eller spelaren vinner. I min kod för klassen Game hade jag ingen kod som gjorde det möjligt för mig att kunna styra vilka kort som läggs till i korthanden utan korten dras från kortleken som blandas olika varje gång. Jag valde därför att dela upp en metod i två, drawCard och addCard. En som drar ett kort från kortleken och en som lägger till ett kort i korthanden. På detta sätt kunde jag lägga till valfria kort i korthanden och se till så att banken vann i ett test och spelaren vann i ett annat. På detta sätt kunde jag göra koden mer testbar. I övrigt upplever jag att det gick att testa all kod.</p>
        <p>Jag tror att testbar kod är något som delvis kan identifieras som “snygg och ren kod”. Jag tror det handlar mest om att inte ha massa överflödig kod och att dela upp koden i olika metoder. Detta för att enklare kunna testa den. Om en metod utför många olika saker så tror jag det blir svårare att testa koden.</p>
        <p>Mitt TIL för detta kursmoment är att PHPUnit används för att enhetstesta PHP-kod.</p>

    <h2 id="kmom05">kmom05</h2>
    <p>Jag tycker att det gick bra att jobba igenom övningen för detta kmom och det gav en bra grund inför uppgiften. Jag upplevde att det var ett bra sätt att enklare skapa databaser, klasser och kontroller och ett bra alternativ om man inte vill koda allt från början. När jag skapade min egen applikation, biblioteket, tänkte jag på att försöka göra användargränssnittet sammanhängande och att man enkelt skulle kunna navigera mellan de olika sidorna. Detta gjordes främst genom användning av länkar och knappar.</p>
    <p>Det gick bra att jobba med ORM i CRUD och jag tycker att det var ett bra sätt och något jag kände mig van vid att programmera. Däremot kändes det kanske inte lika tydligt att man jobbade med CRUD som när man programmerade med SQL. Exempelvis eftersom man inte direkt jobbar mot databasen och använder create, read, update och delete direkt i tabellerna på samma sätt utan man jobbar mer mot klasser och objekt. Min uppfattning om ORM så här långt är att det är ett bra verktyg och gör det enklare att skapa klasser och objekt samt jobba mot databaser utan att man behöver ha koll på SQL.</p>
    <p>Mitt TIL för detta kursmoment är att man kan skapa databaser och klasser genom Doctrine ORM.</p>

    <h2 id="kmom06">kmom06</h2>
    <p>Jag upplever att verktyget PhpMetrics var bra och gav en ganska tydlig bild över kodkvaliten. Jag tycker att det var bra att man kunde enkelt se en bild för komplexitet/maintainability för de olika klasserna samt att kunna se mätvärden för exempelvis coupling, lcom och så vidare. Vid kursmomentet använde jag mig av de värdena som hade gåtts igenom, som är kopplat till 6 c:na, och det var därmed många värden som inte användes. Verktyget kan upplevas ganska komplext till en början, med många olika mätvärden och sidor, men jag tycker att föreläsningarna gjorde det enklare att förstå. </p>

    <p>Liknande upplever jag Scrutinizer men jag tycker nog att det verktyget var lite enklare eftersom det inte visade lika mycket mätvärden som PhpMetrics. Jag tror även att badges är ett bra sätt att visa på kodkvaliten för programmet och ett enkelt sätt att visa om något är bra eller dåligt. I PhpMetrics kändes det som att programmet var mer problematiskt och komplext medan i Scrutinizer fick programmet bra betyg redan efter första bygget, där kodkvaliteten fick betyg 10. Det som var lite sämre var kodtäckning som endast var på 17%. </p>

    <p>Jag tror att kodkvaliten absolut kan påvisas genom badges eller andra mätvärden. Detta eftersom det ger en bra bild över hur programmet funkar. Däremot så tycker jag det var lite svårt att förbättra det som både Scrutinizer och PhpMetrics tyckte var mer komplext eller sämre. För mig är koden jag har skrivit ganska tydlig, även om jag ser förbättringsmöjligheter, och ibland kan det vara svårt att göra det ännu bättre. För programmet funkar ju som det ska vilket kanske är det som är viktigast i längden. Men jag tror absolut att kodkvalitet är ett bra verktyg att ha med sig medan man skriver kod för att alltid sträva efter en så bra kod som möjligt.</p>

    <p>Mitt TIL för kmom06 är att det finns sex stycken steg, de 6 c:na, som används för att förbättra kodkvaliten.</p>


    <h2 id="kmom10">kmom10</h2>
    <p>Text om kursmoment</p>

{% endblock %}
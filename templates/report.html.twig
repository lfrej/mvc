{# templates/report.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Redovisningstexter{% endblock %}

{% block body %}
    <h1>Redovisningstexter</h1>

    <h2 id="kmom01">kmom01</h2>
        <p> Jag har arbetat lite med objektorienterad programmering förut. Främst i kursen oopython där vi jobbade med objektorienterade programmeringstekniker i Python. Däremot är det över ett år sedan jag läste kursen så jag kommer inte ihåg allt men kände igen vissa delar när jag gick igenom kursmaterialet för kmom01.</p>
        <p> Jag upplever att det gick bra att arbeta med PHP i detta kursmoment. PHP modell för klasser och objekt är att ett objekt skapas utifrån en klass och en klass är en modell som används för att skapa nya objekt. En klass kan innehålla egenskaper/properties (konstanter och variabler) och metoder (funktioner) som definierar objektet.</p>
        <p> Jag tycker att kodbasen för uppgiften me/report fungerade bra och strukturen är lite liknande som de vi använt i tidigare kurser. Däremot upplever jag den lite rörig med många olika mappar som man måste navigera mellan för att använda olika filer vilket jag inte direkt upplevt tidigare.</p>
        <p> Gällande artikeln “PHP The Right Way” så tycker jag att den verkar bra och hjälpfull. Det som jag anser verkar vara mer intressant är nog delen om Coding Practices för att hålla koll på grunderna i PHP. Jag tycker även att “Dependency Injection” verkar intressant och skulle vilja lära mig mer om för att minska exempelvis hårdkodning.</p>
        <p> Mitt TIL för kmom01 är att getters ger tillgång till privat data och setters kan sätta privata värden.</p>



    <h2 id="kmom02">kmom02</h2>
    <p>De objektorienterade konstruktionen komposition innebär att en klass består av en annan klass. Till exempel klassen Hus som består av klassen Rum. Kompositionen arv innebär att en klass ärver metoder och egenskaper från en annan klass och därmed utökar basklassen. Kompositionen interface är ett kontrakt över en klasstruktur och visar vilka metoder en klass lovar att erbjuda. Interface är en abstrakt variant av klassen. Kompositionen trait är en återanvändbar koddel och kan läggas till i klasser för att utöka deras metoder. Traits kan användas i flera olika klasser.</p>
    <p>Jag tycker att det har gått bra att jobba med symfony och mvc (model, view och controller). Jag tycker att systemet är logiskt och det är en bra struktur för att skapa webbsidor.  Det som jag tycker har varit svårast i detta kursmoment är att skapa klasserna i model klasserna och att tänka logiskt för att skapa korten och kortleken. I övrigt upplever jag att arbetet med symfony har gått bra.</p>
    <p>Jag är nöjd med implementationen av uppgiften. Som jag nämnde tidigare så tyckte jag att det var klurigt och utmanande att jobba med klasser och skapa ett fungerande kortspel. Men jag tycker att jag fick till det i slutändan och är nöjd över min insats.</p>
    <p>Mitt TIL för detta kursmoment är att man kan använda Namespace för att gruppera ihop variabler, funktioner och klasser.</p>

    <h2 id="kmom03">kmom03</h2>
    <p> Jag började kmom03 genom att skapa flödesdiagram och psuedokod för att planera hur uppgiften ska lösas. Jag tycker att det var ett bra sätt att förbereda sig inför uppgiften och få en bättre bild kring vilken kod som behövs och hur man ska gå tillväga för att lösa problemet. I tidigare uppgifter har jag nog mer kastat mig in att lösa uppgiften genom att koda direkt och då har det fort blivit rörigt och därmed lite svårare. Så jag tror att genom att använda dessa metoder kommer det att bli enklare att implementera uppgiften. Jag tyckte däremot att det var lite svårt att få grepp om hur man skriver psuedokod och hur man gör det på bästa sätt. Så det tyckte jag var en utmaning.</p> 
    <p> Jag utgick sedan från flödesdiagrammet och pseudokoden för att implementera uppgiften. Jag skapade två ytterligare klasser, utöver de från kmom02, som hjälper till och skapar spelet. Dessa var cardhand och game. Cardhand skapar och representerar en korthand och är en komposition av klassen card. Klassen game representerar spelet och består av en korthand för spelaren, en korthand för banken samt kortleken. Jag skapade klassen game för att minimera koden i kontrollern för spelet eftersom jag i början skapade spelet och spelarna direkt i kontrollen vilket resulterade i mycket kod. Genom att skapa klassen game minskade jag koden i kontrollerna och gjorde hanteringen av de olika klasserna enklare.</p>
    <p> Jag är nöjd med lösningen av uppgiften och jag tycker att jag fick till en bra struktur i koden och klasserna. Potentiella förbättringsmöjligheter hade varit att utveckla kortspelet ännu mer och exempelvis göra de optionella kraven. Ytterligare förbättring hade varit att arbeta mer med CSS och designa applikationen mer då det inte varit något jag har fokuserat så mycket på under de senaste kursmomenten. Jag tycker att det fungerar bra att koda i ramverket Symfony. Ramverket ger en bra struktur och gör det relativt enkelt att skapa webbapplikationer.</p>
    <p> Mitt TIL för detta kmom är att göra mer förarbete och problemlösningen innan jag börjar programmera. Exempelvis genom att göra flödesschema eller skriva pseudokod. Detta eftersom jag tycker att det underlättade programmeringen och gav en klarare bild över vad som ska lösas.


    <h2 id="kmom04">kmom04</h2>
    <p>Text om kursmoment</p>

    <h2 id="kmom05">kmom05</h2>
    <p>Text om kursmoment</p>

    <h2 id="kmom06">kmom06</h2>
    <p>Text om kursmoment</p>

    <h2 id="kmom10">kmom10</h2>
    <p>Text om kursmoment</p>

{% endblock %}